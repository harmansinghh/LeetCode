Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

------------------------------------------------------------------xxxxxxxxxxxxxxxxxxxxxxxxxx-------------------------------------
code:-
class Solution {
    public int minDistance(String word1, String word2) {
        int[][] strg=new int[word1.length()+1][word2.length()+1];
        for(int i=strg.length-1;i>=0;i--)
        {
            for(int j=strg[0].length-1;j>=0;j--)
            {
                if(i==strg.length-1 && j==strg[0].length-1)
                {
                    strg[i][j]=0;
                    
                }
                else if(i==strg.length-1)
                {
                    strg[i][j]=strg[i][j+1]+1;
                }
                else if(j==strg[0].length-1)
                {
                     strg[i][j]=strg[i+1][j]+1;
                }
                else
                {
                    if(word1.charAt(i)==word2.charAt(j))
                    {
                        strg[i][j]=strg[i+1][j+1];
                    }
                    else
                    {
                        strg[i][j]=Math.min(strg[i+1][j],
                            Math.min(strg[i][j+1],strg[i+1][j+1]))+1;;
                    }
                }
            }
        }
        return strg[0][0];
    }
}
