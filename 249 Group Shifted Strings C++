Group Shifted Strings
=====================
Given a string, we can "shift" each of its letter to its successive letter,
for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:
"abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all
strings that belong to the same shifting sequence.
For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"],
Return:
[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]
Note: For the return value, each inner list's elements must follow the
lexicographic order.
'''

----------code-------------

#include<iostream>
 #include<vector>
 #include<string>
 #include<bits/stdc++.h>
 using namespace std;
 // This is a functional problem. You have to complete this function.
 // It takes as input the a string array. It return a list of list of
 // strings of strings with same shifting sequence grouped together.
 string getkey(string s)
 {
     string key="";
     for(int i=1;i<s.size();i++)
     {
         int val=s[i]-s[i-1];
         if(val<0)
            val+=26;
         key = key+ to_string(val)+" ";
     }
     return key;
 }
 
 vector<vector<string> > groupStrings(vector <string>& strs){
     // write your code here.
     unordered_map<string, vector<string>> map;
     for(int i=0;i<strs.size();i++)
     {
        string key = getkey(strs[i]);
        if(map.find(key)==map.end())
            {
                vector<string> temp;
                map[key]=temp;
            }
        map[key].push_back(strs[i]);
     }
     vector<vector<string>> res;
     for(auto itr=map.begin();itr!=map.end();itr++)
     {
         sort(itr->second.begin(),itr->second.end());
         res.push_back(itr->second);
     }
     return res;
 
 }
 
 void display(vector<vector<string> > &v){
     for(int i=0;i<v.size();i++){
         for(int j=0;j<v[i].size();j++){
             cout<<v[i][j]<<" ";
         }
         cout<<endl;
     }
 }
 //function to sort the lists
 bool sortcol( const vector<string>& l1, 
                const vector<string>& l2 ) { 
  
     if (l1.size() != l2.size()) {
         return l2.size()<l1.size();
     } else {
         if(l1.size()==0){
             return false;
         }else{
             return l1[0]<l2[0];
         }
     }
  
 } 
 int main(int argc,char ** argv){
 
     int n;
     cin>>n;
     vector<string> strs;
     for(int i=0;i<n;i++){
         string a;
         cin>>a;
         strs.push_back(a);
     }
     
     vector<vector<string> > res;
     res=groupStrings(strs);
     for(vector<string> v:res){
         sort(v.begin(),v.end());
     }
     sort(res.begin(),res.end(),sortcol);
     display(res);
 }
